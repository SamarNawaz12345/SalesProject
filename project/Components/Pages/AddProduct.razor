@page "/add-product"
@inject AppDbContext DbContext
@using System.ComponentModel.DataAnnotations
@using project.Data
@using project.IProductService
@using project.Model
@using project.Services
@rendermode InteractiveServer
@inject CataegoryService CataegoryService
@inject ProductService ProductService 
@inject NavigationManager Navigation

<h3>Add New Product</h3>

<EditForm Method="Post" Model="newProduct" OnValidSubmit="HandleValidSubmit" FormName="Addproduct">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="productName">Product Name:</label>
         <InputText id="productName" class="form-control" @bind-Value="newProduct.ProductName" />
        <ValidationMessage For="@(() => newProduct.ProductName)" /> 
            
    </div>
     @*  <InputText id="category" class="form-control" @bind-Value="newProduct.Category" /> *@
   <div class="form-group">
    <label for="category">Category:</label>
        <InputSelect id="category" class="form-control" @bind-Value="newProduct.Category">
        <option value="">Select a Category</option>
            @foreach (var category in categories)
            {
                <option value="@category.CategoryName">@category.CategoryName</option>
            }
    </InputSelect>
    <ValidationMessage For="@(() => newProduct.Category)" />
</div>


    <div class="form-group">
        <label for="productCode">Product Code:</label>
        <InputText id="productCode" class="form-control" @bind-Value="newProduct.ProductCode" />
        <ValidationMessage For="@(() => newProduct.ProductCode)" />
    </div>

    <div class="form-group">
        <label for="sellingPrice">Selling Price:</label>
        <InputNumber id="sellingPrice" class="form-control" @bind-Value="newProduct.SellingPrice" />
        <ValidationMessage For="@(() => newProduct.SellingPrice)" />
    </div>

    <div class="form-group">
        <label for="quantity">Quantity:</label>
        <InputNumber id="quantity" class="form-control" @bind-Value="newProduct.Quantity" />
        <ValidationMessage For="@(() => newProduct.Quantity)" />
    </div>
    <div class="form-group">
        <label for="purchasingPrice">Purchasing Price:</label>
        <InputNumber id="purchasingPrice" class="form-control" @bind-Value="newProduct.PurchasingPrice" />
        <ValidationMessage For="@(() => newProduct.PurchasingPrice)" />
    </div>
    <div class="form-group">
        <label for="expiryDate">Expiry Date:</label>
        <InputDate id="expiryDate" class="form-control" @bind-Value="newProduct.ExpiryDate" />
        <ValidationMessage For="@(() => newProduct.ExpiryDate)" />
    </div>
    <div class="form-group">
        <label for="volume">Volume:</label>
        <InputNumber id="volume" class="form-control" @bind-Value="newProduct.Volume" />
        <ValidationMessage For="@(() => newProduct.Volume)" />
    </div>

    <div class="form-group">
        <label for="volumeType">Volume Type:</label>
       @*  <InputText id="volumeType" class="form-control" @bind-Value="newProduct.VolumeType" /> *@
        <InputSelect id="volumeType" class="form-control" @bind-Value="newProduct.VolumeType">
            <option value="">-- Select Volume Type --</option>
            <option value="Kg">Kg</option>
            <option value="mm">mm</option>
           @*  <option value="Powdered">Powdered</option> *@
        </InputSelect>
        <ValidationMessage For="@(() => newProduct.VolumeType)" />
    </div>
    <div class="form-group">
        <label for="vendorName">Vendor Name:</label>
        <InputText id="vendorName" class="form-control" @bind-Value="newProduct.VendorName" />
    </div>

    <div class="form-group">
        <label for="vendorNumber">Vendor Number:</label>
        <InputText id="vendorNumber" class="form-control" @bind-Value="newProduct.VendorNumber" />
        <ValidationMessage For="@(() => newProduct.VendorNumber)" />
    </div>

    <div class="form-group mt-3">
        <label for="description">Description:</label>
        <InputTextArea id="description" class="form-control" @bind-Value="newProduct.Description"  />
        <ValidationMessage For="@(() => newProduct.Description)" />
    </div>
    <div class="form-group">
        <label for="notifyLimit">Notify Limit:</label>
        <InputNumber id="notifyLimit" class="form-control" @bind-Value="newProduct.NotifyLimit" />
        <ValidationMessage For="@(() => newProduct.NotifyLimit)" />
    </div>

    <div class="form-group">
        <label for="productPic">Product Picture:</label>
        <InputFile id="productPic" OnChange="@HandleFileSelected" />
        <ValidationMessage For="@(() => newProduct.ProductPic)" />
    </div>

    <div class="form-group">
        <label for="productType">Product Type:</label>
        <InputSelect id="productType" class="form-control" @bind-Value="newProduct.ProductType">
            <option value="">-- Select Product Type --</option>
            <option value="Liquid">Liquid</option>
            <option value="Solid">Solid</option>
            <option value="Powdered">Powdered</option>
        </InputSelect>
        <ValidationMessage For="@(() => newProduct.ProductType)" />
    </div>
    <input type="hidden" id="createdAt" @bind="newProduct.CreatedAt" />
    <div class="form-group">
        <label for="tax">Tax (%):</label>
        <InputNumber id="tax" class="form-control" @bind-Value="newProduct.Tax" step="0.01" />
    </div>

    <button type="submit" class="btn btn-primary">Add Product</button>
</EditForm>

@code {
    private List<Category> categories = new List<Category>(); ////  for category in productname
    private Product newProduct = new Product();
    private int selectedCategoryId; // Use this to bind to the selected category
    private string selectedCategoryDescription = string.Empty;
   //  private int selectedCategoryId;                          //// for category in product name 

       protected override async Task OnInitializedAsync()
    {
        categories = await CataegoryService.GetCategoriesAsync();
    }

    //  private async Task AddProoduct()
    // {
    //     newProduct.Id = selectedCategoryId;
    //     await ProductService.CreateProductAsync(newProduct);
    // }
   // private Product newProduct = new Product();

    private async Task HandleValidSubmit()
    {

      
        try
        {
            newProduct.CreatedAt = DateTime.Now; // Set CreatedAt to the current date
            await ProductService.CreateProductAsync(newProduct);
              // await CataegoryService.AddCategoryAsync(newCategory);
          //  await DbContext.SaveChangesAsync();

            Console.WriteLine("Product added successfully."); // Debug message
                                                              // Clear the form after submission
            newProduct = new Product();
            Navigation.NavigateTo("/products");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}"); // Log error if any
        }
    }
    

    
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            try
            {
                var buffer = new byte[file.Size];
                await file.OpenReadStream().ReadAsync(buffer);
                newProduct.ProductPic = buffer; // Store as byte array
                Console.WriteLine("File selected successfully.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}"); // Log any errors
            }
        }
    }
}

