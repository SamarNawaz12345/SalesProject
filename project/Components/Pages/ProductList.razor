@page "/products"
@using Microsoft.EntityFrameworkCore
@using project.Data
@using project.IProductService
@using project.Model
@inject AppDbContext DbContext
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject ProductService ProductService



<h3>Product List</h3>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else if (!products.Any())
{
    <p>No products available.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Category</th>
                <th>Product Code</th>
                <th>Selling Price</th>
                <th>Purchasing Price</th>
                <th>Quantity</th>
                <th>Volume</th>
                <th>Volume Type</th>
                <th>Vendor Name</th>
                <th>Vendor Number</th>
                <th>Description</th>
                <th>ProductType</th>
                <th>Notify Limit</th>               
                <th>Product Pic</th>               
                <th>Created At</th>
                <th>Expiry Date</th>
                <th>Tax</th>
                <!-- Add other columns as needed -->
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.ProductName</td>
                    <td>@product.Category</td>
                    <td>@product.ProductCode</td>
                    <td>@product.SellingPrice</td>
                    <td>@product.PurchasingPrice</td>
                    <td>@product.Quantity</td>
                    <td>@product.Volume</td>
                    <td>@product.VolumeType</td>
                    <td>@product.VendorName</td>
                    <td>@product.VendorNumber</td>
                    <td>@product.Description</td>
                    <td>@product.ProductType</td>
                    <td>@product.NotifyLimit</td>
                    <td>
                        @if (product.ProductPic != null && product.ProductPic.Length > 0)
                        {
                            <img src="data:image/png;base64,@Convert.ToBase64String(product.ProductPic)" alt="Product Picture" width="100" />
                        }
                        else
                        {
                            <span>No Image</span>
                        }
                    </td>
                    <td>@product.CreatedAt.ToString("yyyy-MM-dd")</td>
                    <td>@product.ExpiryDate?.ToString("yyyy-MM-dd")</td>
                    <td>@product.Tax</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditProduct(product.Id)">Edit</button>
                         <button class="btn btn-danger" @onclick="() => DeleteProduct(product.Id)">Delete</button> 
                    </td>
                   
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Product> products;
    private string errorMessage;
    protected override async Task OnInitializedAsync()
    {
        // Fetch the product data from the database
       // products = await DbContext.Products.ToListAsync();
        try
        {
          products = await ProductService.GetProductsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = "Error fetching data: " + ex.Message;
        }
    }
    private void EditProduct(int productId)
    {
        // Navigate to the edit page with the selected product ID
        Navigation.NavigateTo($"/edit-product/{productId}");
    }

    private async Task DeleteProduct(int productId)
    {
        // var product = await DbContext.Products.FindAsync(productId);

        // if (product != null)
        // {
        //     DbContext.Products.Remove(product);
        //     await DbContext.SaveChangesAsync();

        //     // Refresh the product list after deletion
        //     products = await DbContext.Products.ToListAsync();
        // }
        try
        {
            var success = await ProductService.DeleteProductAsync(productId);
            if (success)
            {
                products = await ProductService.GetProductsAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting product: {ex.Message}");
        }
    }
}
